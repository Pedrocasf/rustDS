use std::env;
use std::process::Command;
use std::fs::*;
fn main() {
    let args: Vec<String> = env::args().collect();
    println!("{:?}",args);
    let name = args[1].clone().into_bytes();
    let arm9 = args[2].clone();
    let arm7 = args[3].clone();
    let outf = args[4].clone();
    let elf9 = read(arm9.clone()).unwrap();
    let elf7 = read(arm7.clone()).unwrap();
    let c9 = Command::new("arm-none-eabi-objcopy")
    .args(&["-O", "binary", &arm9, "arm9"])
    .output()
    .expect("Failed to objcopy arm9");
    println!("{:?}",c9);
    let arm9 = read("arm9").expect("Nao pode ler o arquivo arm9");
    let c7 = Command::new("arm-none-eabi-objcopy")
    .args(&["-O", "binary", &arm7, "arm7"])
    .output()
    .expect("Failed to objcopy arm7");
    println!("{:?}",c7);
    let arm7 = read("arm7").expect("Nao pode ler o arquivo arm7");
    let mut endfile = vec![0;0x20000];
    endfile[0..name.len()].copy_from_slice(&name);

    endfile[0x4000..0x4000+arm9.len()].copy_from_slice(&arm9);
    let mut arm7off = 0x00008000;
    if 0x4000 + arm9.len() < 0x8000 {
        endfile[0x8000..0x8000+arm7.len()].copy_from_slice(&arm7);
    }else{
        let arm9end = 0x4000 + arm9.len() as u32;
        arm7off = arm9end + (0x1000 - (arm9end%0x1000));
        endfile[arm7off as usize..arm7off as usize+arm7.len()].copy_from_slice(&arm7);
    }
    let arm9start = u8_to_u32(&elf9[0x18..0x1C]);
    endfile[0x20..0x24].copy_from_slice(&u32_to_u8(0x00004000));
    endfile[0x24..0x28].copy_from_slice(&u32_to_u8(arm9start));
    endfile[0x28..0x2C].copy_from_slice(&u32_to_u8(0x02000000));
    endfile[0x2C..0x30].copy_from_slice(&u32_to_u8(arm9.len() as u32));

    endfile[0x30..0x34].copy_from_slice(&u32_to_u8(arm7off));
    endfile[0x34..0x38].copy_from_slice(&elf7[0x18..0x1C]);
    endfile[0x38..0x3C].copy_from_slice(&u32_to_u8(0x037F8000));
    endfile[0x3C..0x40].copy_from_slice(&u32_to_u8(arm7.len() as u32));
    
    endfile[0x60..0x64].copy_from_slice(&u32_to_u8(0x00586000));
    endfile[0x64..0x68].copy_from_slice(&u32_to_u8(0x001808F8));

    endfile[0x6E] = 0x1E;
    endfile[0x6F] = 0x05;

    endfile[0x80..0x84].copy_from_slice(&u32_to_u8((0x8000+ arm7.len()) as u32));
    endfile[0x84..0x88].copy_from_slice(&u32_to_u8(0x00004000));
    endfile[0xC0..0x15C].copy_from_slice(&LOGO);

    endfile[0x15C] = 0x56;
    endfile[0x15D] = 0xCF;
    let crc = calc_crc16(&endfile[0x4000..0x8000]);
    endfile[0x6D] = (crc >> 8) as u8;
    endfile[0x6C] = crc as u8;
    
    let crc = calc_crc16(&endfile[0..0x15E]);
    endfile[0x15F] = (crc >> 8) as u8;
    endfile[0x15E] = crc as u8;
    
    write(outf, endfile).expect("nao pode escrever no arquivo final")
}
const LOGO:[u8;0x9C]=[
0x24,0xFF,0xAE,0x51,0x69,0x9A,0xA2,0x21,0x3D,0x84,0x82,0x0A,0x84,0xE4,0x09,0xAD
,0x11,0x24,0x8B,0x98,0xC0,0x81,0x7F,0x21,0xA3,0x52,0xBE,0x19,0x93,0x09,0xCE,0x20
,0x10,0x46,0x4A,0x4A,0xF8,0x27,0x31,0xEC,0x58,0xC7,0xE8,0x33,0x82,0xE3,0xCE,0xBF
,0x85,0xF4,0xDF,0x94,0xCE,0x4B,0x09,0xC1,0x94,0x56,0x8A,0xC0,0x13,0x72,0xA7,0xFC
,0x9F,0x84,0x4D,0x73,0xA3,0xCA,0x9A,0x61,0x58,0x97,0xA3,0x27,0xFC,0x03,0x98,0x76
,0x23,0x1D,0xC7,0x61,0x03,0x04,0xAE,0x56,0xBF,0x38,0x84,0x00,0x40,0xA7,0x0E,0xFD
,0xFF,0x52,0xFE,0x03,0x6F,0x95,0x30,0xF1,0x97,0xFB,0xC0,0x85,0x60,0xD6,0x80,0x25
,0xA9,0x63,0xBE,0x03,0x01,0x4E,0x38,0xE2,0xF9,0xA2,0x34,0xFF,0xBB,0x3E,0x03,0x44
,0x78,0x00,0x90,0xCB,0x88,0x11,0x3A,0x94,0x65,0xC0,0x7C,0x63,0x87,0xF0,0x3C,0xAF
,0xD6,0x25,0xE4,0x8B,0x38,0x0A,0xAC,0x72,0x21,0xD4,0xF8,0x07];

pub fn u32_to_u8(x:u32) -> [u8;4] {
    let b0 : u8 = (x >> 24) as u8;
    let b1 : u8 = (x >> 16) as u8;
    let b2 : u8 = (x >> 8) as u8;
    let b3 : u8 = x as u8;
    [b3, b2, b1, b0]
}
pub fn u8_to_u32(val:&[u8])->u32{
        let b0 = val[0] as u32;
        let b1 = val[1] as u32;
        let b2 = val[2] as u32;
        let b3 = val[3] as u32;
        (b3 << 24) | (b2 << 16) | (b1 << 8) | (b0 << 0) 
    }
pub fn calc_crc16(data:&[u8])->u16{
    let mut crc:u16 = 0xFFFF;
    for i in 0..data.len(){
        crc = (crc>>8) ^ CRC_TABLE[((crc ^ data[i] as u16) & 0xFF) as usize];
    }
    return crc;
}
const CRC_TABLE:[u16;256] =
[
	0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
	0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
	0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
	0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
	0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
	0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
	0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
	0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
	0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
	0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
	0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
	0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
	0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
	0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
	0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
	0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
	0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
	0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
	0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
	0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
	0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
	0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
	0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
	0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
	0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
	0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
	0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
	0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
	0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
	0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
	0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
	0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
];