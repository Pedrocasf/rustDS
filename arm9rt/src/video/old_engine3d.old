pub mod e3d {
    use crate::macros::*;
    use alloc::boxed::Box;
    use core::{borrow::BorrowMut, u32, usize};
    use crate::dynamic_array::DynamicArray;
    use crate::power::POWCNT::{POWCNT1, PowCnt1Opts};
    use voladdress::*;
    use crate::*;
    use crate::buddy_alloc;
    use core::cell::RefCell;
    use simba::scalar::{FixedI13F3, FixedI3F13};
    use crate::dma::SrcAddrControl::Fixed;

    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixPush(i32);
    impl MatrixPop{
        const_new!();
        bitfield_int !(i32;0..=5:i32,get_matrix_push,with_matrix_push,set_matrix_push);
    }
    pub const MTXPUSH :VolAddress<MatrixPush,(),Safe> = unsafe { VolAddress::new(0x04000444) };



    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixStore(i32);
    impl MatrixStore{
        const_new!();
        bitfield_int !(i32;0..=5:i32,get_matrix_store,with_matrix_store,set_matrix_store);
    }
    pub const MTXSTOR :VolAddress<MatrixStore,(),Safe> = unsafe { VolAddress::new(0x0400044C) };
    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixReStore(i32);
    impl MatrixReStore{
        const_new!();
        bitfield_int !(i32;0..=5:i32,get_matrix_restore,with_matrix_restore,set_matrix_restore);
    }
    pub const MTXRESTOR :VolAddress<MatrixReStore,(),Safe> = unsafe { VolAddress::new(0x04000450) };

    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixIdent(i32);
    impl MatrixIdent{
        const_new!();
        bitfield_int !(i32;0..=5:i32,get_matrix_ident,with_matrix_ident,set_matrix_ident);
    }
    pub const MTXIDENT :VolAddress<MatrixIdent,(),Safe> = unsafe { VolAddress::new(0x04000454) };
    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixLoad4x4(i32);
    impl MatrixLoad4x4{
        const_new!();
        bitfield_int!(i32;0..=5:i32,get_matrix_L4x4,with_matrix_L4x4,set_matrix_L4x4);
    }
    pub const MTXL4X4:VolAddress<MatrixLoad4x4,(),Safe> = unsafe { VolAddress::new(0x04000458) };
    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixLoad4x3(i32);
    impl MatrixLoad4x3{
        const_new!();
        bitfield_int!(i32;0..=5:i32,get_matrix_L4x3,with_matrix_L4x3,set_matrix_L4x3);
    }
    pub const MTXL4X3:VolAddress<MatrixLoad4x3,(),Safe> = unsafe { VolAddress::new(0x0400045C) };
    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixMul4x4(i32);
    impl MatrixMul4x4{
        const_new!();
        bitfield_int!(i32;0..=5:i32,get_matrix_M4x4,with_matrix_M4x4,set_matrix_M4x4);
    }
    pub const MTXM4X4:VolAddress<MatrixMul4x4,(),Safe> = unsafe { VolAddress::new(0x04000460) };
    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixMul4x3(i32);
    impl MatrixMul4x3{
        const_new!();
        bitfield_int!(i32;0..=5:i32,get_matrix_M4x3,with_matrix_M4x3,set_matrix_M4x3);
    }
    pub const MTXM4X3:VolAddress<MatrixMul4x3,(),Safe> = unsafe { VolAddress::new(0x04000464) };
    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixMul3x3(i32);
    impl MatrixMul3x3{
        const_new!();
        bitfield_int!(i32;0..=5:i32,get_matrix_M3x3,with_matrix_M3x3,set_matrix_M3x3);
    }
    pub const MTXM3X3:VolAddress<MatrixMul3x3,(),Safe> = unsafe { VolAddress::new(0x04000468) };
    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixScale(i32);
    impl MatrixScale{
        const_new!();
        bitfield_int!(i32;0..=5:i32,get_matrix_scale,with_matrix_scale,set_matrix_scale);
    }
    pub const MTXSCALE:VolAddress<MatrixScale,(),Safe> = unsafe { VolAddress::new(0x0400046C) };
    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct MatrixTransform(i32);
    impl MatrixTransform{
        const_new!();
        bitfield_int!(i32;0..=5:i32,get_matrix_transform,with_matrix_transform,set_matrix_transform);
    }
    pub const MTXTR:VolAddress<MatrixTransform,(),Safe> = unsafe { VolAddress::new(0x04000470) };
    #[derive(Debug, Clone, Copy, Default, PartialEq, Eq)]
    #[repr(transparent)]
    pub struct ViewPort(u32);
    impl ViewPort{
        const_new!();
        bitfield_int!(u32;0..=7:u32,x1,with_x1,set_x1);
        bitfield_int!(u32;8..=15:u32,y1,with_y1,set_y1);
        bitfield_int!(u32;16..=23:u32,x2,with_x2,set_x2);
        bitfield_int!(u32;24..=31:u32,y2,with_y2,set_y2);
    }
    pub const VIEWPORT:VolAddress<ViewPort,(),Safe> = unsafe { VolAddress::new(0x04000580) };











} 